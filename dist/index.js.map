{
  "version": 3,
  "sources": ["../lib/dmeankbn2.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dsumkbn2 = require( '@stdlib/blas-ext-base-dsumkbn2' );\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a double-precision floating-point strided array using a second-order iterative Kahan\u2013Babu\u0161ka algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan\u2013Babu\u0161ka algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babu\u0161ka-Summation-Algorithm.\" _Computing_ 76 (3): 279\u201393. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dmeankbn2( N, x, 1 );\n* // returns ~0.3333\n*/\nfunction dmeankbn2( N, x, stride ) {\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\treturn dsumkbn2( N, x, stride ) / N;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dmeankbn2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dsumkbn2 = require( '@stdlib/blas-ext-base-dsumkbn2' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a double-precision floating-point strided array using a second-order iterative Kahan\u2013Babu\u0161ka algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan\u2013Babu\u0161ka algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babu\u0161ka-Summation-Algorithm.\" _Computing_ 76 (3): 279\u201393. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dmeankbn2( N, x, 2, 1 );\n* // returns 1.25\n*/\nfunction dmeankbn2( N, x, stride, offset ) {\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\treturn dsumkbn2( N, x, stride, offset ) / N;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dmeankbn2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar dmeankbn2 = require( './dmeankbn2.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dmeankbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dmeankbn2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the arithmetic mean of a double-precision floating-point strided array using a second-order iterative Kahan\u2013Babu\u0161ka algorithm.\n*\n* @module @stdlib/stats-base-dmeankbn2\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dmeankbn2 = require( '@stdlib/stats-base-dmeankbn2' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dmeankbn2( N, x, 1 );\n* // returns ~0.3333\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var dmeankbn2 = require( '@stdlib/stats-base-dmeankbn2' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dmeankbn2.ndarray( N, x, 2, 1 );\n* // returns 1.25\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar dmeankbn2;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( tmp instanceof Error ) {\n\tdmeankbn2 = main;\n} else {\n\tdmeankbn2 = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dmeankbn2;\n\n// exports: { \"ndarray\": \"dmeankbn2.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,gCAAiC,EA8BzD,SAASC,EAAWC,EAAGC,EAAGC,EAAS,CAClC,OAAKF,GAAK,EACF,IAEHA,IAAM,GAAKE,IAAW,EACnBD,EAAG,CAAE,EAENH,EAAUE,EAAGC,EAAGC,CAAO,EAAIF,CACnC,CAKAH,EAAO,QAAUE,ICjEjB,IAAAI,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,gCAAiC,EAAE,QAgC3D,SAASC,EAAWC,EAAGC,EAAGC,EAAQC,EAAS,CAC1C,OAAKH,GAAK,EACF,IAEHA,IAAM,GAAKE,IAAW,EACnBD,EAAGE,CAAO,EAEXL,EAAUE,EAAGC,EAAGC,EAAQC,CAAO,EAAIH,CAC3C,CAKAH,EAAO,QAAUE,ICnEjB,IAAAK,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAY,IACZC,EAAU,IAKdF,EAAaC,EAAW,UAAWC,CAAQ,EAK3CH,EAAO,QAAUE,ICejB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAO,IAKPC,EACAC,EAAMH,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDI,aAAe,MACnBD,EAAYD,EAEZC,EAAYC,EAMb,OAAO,QAAUD",
  "names": ["require_dmeankbn2", "__commonJSMin", "exports", "module", "dsumkbn2", "dmeankbn2", "N", "x", "stride", "require_ndarray", "__commonJSMin", "exports", "module", "dsumkbn2", "dmeankbn2", "N", "x", "stride", "offset", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "dmeankbn2", "ndarray", "join", "tryRequire", "main", "dmeankbn2", "tmp"]
}
